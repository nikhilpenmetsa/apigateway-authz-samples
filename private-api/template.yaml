AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Private API Gateway with Lambda integration, DynamoDB, and Cognito User Pool in a VPC

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Deployment stage for the API
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the API Gateway will be deployed
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for the VPC endpoints
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of security group IDs for the VPC endpoints

Resources:
  # DynamoDB Table for Customer Data
  CustomerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'private-customer-data-${Stage}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true

  # Cognito User Pool for Authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'private-customer-user-pool-${Stage}'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub 'private-customer-app-client-${Stage}'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED

  # Lambda Function for API Operations (GET/PUT customer data)
  CustomerDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'private-customer-data-function-${Stage}'
      CodeUri: lambda/customer_data/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          TABLE_NAME: !Ref CustomerTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomerTable
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  # Lambda Function for Custom Authorization
  CustomAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'private-custom-authorizer-${Stage}'
      CodeUri: lambda/authorizer/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 5
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APP_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'cognito-idp:AdminInitiateAuth'
                - 'cognito-idp:AdminGetUser'
              Resource: !GetAtt UserPool.Arn
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  # VPC Endpoint for API Gateway
  ApiGatewayVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcId: !Ref VpcId
      SubnetIds: !Ref SubnetIds
      SecurityGroupIds: !Ref SecurityGroupIds

  # API Gateway
  CustomerAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'private-customer-api-${Stage}'
      StageName: !Ref Stage
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref ApiGatewayVpcEndpoint
      Auth:
        DefaultAuthorizer: CustomAuthorizer
        Authorizers:
          CustomAuthorizer:
            FunctionArn: !GetAtt CustomAuthorizerFunction.Arn
            Identity:
              Header: Authorization
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Sub 'Private Customer API - ${Stage}'
        paths:
          /customers/{customerId}:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomerDataFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses:
                '200':
                  description: 'Successful operation'
            put:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomerDataFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses:
                '200':
                  description: 'Successful operation'
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'

  # CloudWatch Log Group for API Gateway Access Logs
  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/private-customer-api-${Stage}'
      RetentionInDays: 7

  # Resource Policy for API Gateway
  ApiGatewayResourcePolicy:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'private-customer-api-policy-${Stage}'
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomerAPI}/*'
            Condition:
              StringEquals:
                'aws:SourceVpc': !Ref VpcId

  # Lambda Permission for API Gateway
  CustomerDataFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CustomerDataFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomerAPI}/*'

  # Lambda Permission for Custom Authorizer
  CustomAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CustomAuthorizerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomerAPI}/authorizers/*'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${CustomerAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  CustomerTableName:
    Description: DynamoDB Table Name
    Value: !Ref CustomerTable
  VpcEndpointId:
    Description: VPC Endpoint ID
    Value: !Ref ApiGatewayVpcEndpoint